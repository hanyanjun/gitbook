{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction 个人记录学习 markdown语法查询 Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2021-02-22 15:59:10 "},"content/help/readme.html":{"url":"content/help/readme.html","title":"帮助","keywords":"","body":"Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2021-02-11 10:44:21 "},"content/help/configHelp.html":{"url":"content/help/configHelp.html","title":"gitbook配置","keywords":"","body":"{ \"plugins\": [ \"-lunr\", \"-search\", \"search-plus\", \"splitter\", \"copy-code-button\", \"expandable-chapters-small\" ] } search-plus 让搜索支持中文，注意需要先把默认的两个插件lunr和serach禁用掉，禁用的方式就是在前面加上-号 spliter 菜单栏宽度可调节 copy-code-button 代码可以一键 copy expandable-chapters-small 菜单栏可以折叠 gitbook-button配置 ``` { \"plugins\": [ \"github-buttons\" ], \"pluginsConfig\": { \"github-buttons\": {\"buttons\": [{ \"user\": \"azu\", \"repo\": \"JavaScript-Plugin-Architecture\", \"type\": \"star\", \"size\": \"large\" }, { \"user\": \"azu\", \"type\": \"follow\", \"width\": \"230\", \"count\": false }] } } } ``` Option Description 备注 user GitHub username that owns the repo/Username to sponsor 必须，用户名 repo GitHub repository to pull the forks and watchers counts 必须，仓库名 type Type of button to show: watch, fork, sponsor, or follow 必须，4种类型之一 count Show the optional watchers or forks count: none by default or true 可选，是否显示计数 size Optional flag for using a larger button: none by default or large 可选，按钮大小 Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2021-03-19 12:26:40 "},"content/help/plugins.html":{"url":"content/help/plugins.html","title":"gitbook插件","keywords":"","body":"GitBook 插件 记录一些实用的插件, 如果要指定插件的版本可以使用 plugin@0.3.1。下面的插件在 GitBook 的 3.2.3 版本中可以正常工作，因为一些插件可能不会随着 GitBook 版本的升级而升级，即下面的插件可能不适用高版本的 GitBook，所以这里指定了 GitBook 的版本。另外本文记录的插件在 Linux 下都是可以正确工作的，windows 系统没有测试。这里只是列举了一部分插件，如果有其它的需求，可以到 插件官网 区搜索相关插件。 Disqus - Disqus 评论 Search Plus - 支持中文搜索 Prsim - 使用 Prism.js 高亮代码 Advanced Emoji - 支持 emoji 表情 Github - 添加github图标 Github Buttons - 添加项目在 Github 上的 star、fork、watch 信息 Ace Plugin - 支持ace Emphasize - 为文字加上底色 KaTex - 支持数学公式 Include Codeblock - 用代码块显示包含文件的内容 Splitter - 使侧边栏的宽度可以自由调节 Mermaid-gb3 - 支持渲染 Mermaid 图表 Puml - 支持渲染 uml 图 Graph - 使用 function-plot 绘制数学函数图 Chart - 绘制图形 Sharing-plus - 分享当前页面 Tbfed-pagefooter - 为页面添加页脚 Expandable-chapters-small - 使左侧的章节目录可以折叠 Toggle-chapters - 左侧章节目录可以折叠 Sectionx - 将页面分块显示 GA - Google 统计 3-ba - 百度统计 Donate - 打赏插件 Local Video - 使用 Video.js 播放本地视频 Simple-page-toc - 自动生成本页的目录结构 Anchors - 添加 Github 风格的锚点 Anchor-navigation-ex - 添加Toc到侧边悬浮导航以及回到顶部按钮 Edit Link - 链接到当前页源文件上 Sitemap-general - 生成sitemap Favicon - 更改网站的 favicon.ico Todo - 添加 Todo 功能 Terminal - 模拟终端样式 Copy-code-button - 为代码块添加复制按钮 Alerts - 添加不同 alerts 样式的 blockquotes Include-csv - 显示 csv 文件内容 Musicxml - 支持 musicxml 格式的乐谱渲染 Klipse - 集成 Kplise (online code evaluator) Versions-select - 添加版本选择的下拉菜单 Rss - 添加 rss 订阅功能 Theme-comscore - 修改标题和表格颜色 summary - 自动生成目录 Disqus 添加disqus评论 插件地址 \"plugins\": [ \"disqus\" ], \"pluginsConfig\": { \"disqus\": { \"shortName\": \"gitbookuse\" } } Search Plus 支持中文搜索, 需要将默认的 search 和 lunr 插件去掉。 插件地址 { \"plugins\": [\"-lunr\", \"-search\", \"search-plus\"] } Prism 使用 Prism.js 为语法添加高亮显示，需要将 highlight 插件去掉。该插件自带的主题样式较少，可以再安装 prism-themes 插件，里面多提供了几种样式，具体的样式可以参考 这里，在设置样式时要注意设置 css 文件名，而不是样式名。 Prism 插件地址    prism-themes 插件地址 { \"plugins\": [ \"prism\", \"-highlight\" ], \"pluginsConfig\": { \"prism\": { \"css\": [ \"prism-themes/themes/prism-base16-ateliersulphurpool.light.css\" ] } } } 如果需要修改背景色、字体大小等，可以在 website.css 定义 pre[class*=\"language-\"] 类来修改，下面是一个示例： pre[class*=\"language-\"] { font-size: 1em; line-height: 1.2em; background-color: #f7f7f7; border: none; } Advanced Emoji 支持emoji表情 emoij表情列表插件地址 \"plugins\": [ \"advanced-emoji\" ] 使用示例： Github 添加github图标 插件地址 \"plugins\": [ \"github\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/zhangjikai\" } } Github Buttons 添加项目在 github 上的 star，watch，fork情况 插件地址 { \"plugins\": [ \"github-buttons\" ], \"pluginsConfig\": { \"github-buttons\": { \"repo\": \"zhangjikai/gitbook-use\", \"types\": [ \"star\", \"watch\", \"fork\" ], \"size\": \"small\" } } } Ace Plugin 插件地址 使 GitBook 支持ace 。默认情况下，line-height 为 1，会使代码显得比较挤，而作者好像没提供修改行高的选项，如果需要修改行高，可以到 node_modules -> github-plugin-ace -> assets -> ace.js 中加入下面两行代码 (30 行左右的位置)： editor.container.style.lineHeight = 1.25; editor.renderer.updateFontSize(); 不过上面的做法有个问题就是，每次使用 gitbook install 安装新的插件之后，代码又会重置为原来的样子。另外可以在 website.css 中加入下面的 css 代码来指定 ace 字体的大小 .aceCode { font-size: 14px !important; } 使用插件： \"plugins\": [ \"ace\" ] 使用示例: {%raw%}// This is a hello world program for C. #include &lt;stdio.h&gt; int main(){ printf(&quot;Hello World!&quot;); return 1; }{%endraw%} Emphasize 为文字加上底色 插件地址 \"plugins\": [ \"emphasize\" ] 使用示例: This text is {% em %}highlighted !{% endem %} This text is {% em %}highlighted with **markdown**!{% endem %} This text is {% em type=\"green\" %}highlighted in green!{% endem %} This text is {% em type=\"red\" %}highlighted in red!{% endem %} This text is {% em color=\"#ff0000\" %}highlighted with a custom color!{% endem %} KaTex 为了支持数学公式, 我们可以使用KaTex和MathJax插件, 官网上说Katex速度要快于MathJax 插件地址MathJax使用LaTeX语法编写数学公式教程 \"plugins\": [ \"katex\" ] 使用示例: When {% math %}a \\ne 0{% endmath %}, there are two solutions to {% math %}(ax^2 + bx + c = 0){% endmath %} and they are {% math %}x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.{% endmath %} {% math %} \\int_{-\\infty}^\\infty g(x) dx {% endmath %} {% math %} 1 \\over 3 {% endmath %} Include Codeblock 使用代码块的格式显示所包含文件的内容. 该文件必须存在。插件提供了一些配置，可以区插件官网查看。如果同时使用 ace 和本插件，本插件要在 ace 插件前面加载。 插件地址 { \"plugins\": [ \"include-codeblock\" ], \"pluginsConfig\": { \"include-codeblock\": { \"template\": \"ace\", \"unindent\": \"true\", \"theme\": \"monokai\" } } } 使用示例: {% if file.type==\"asciidoc\" %}++++{% endif %} {%raw%}Error: file not found: /Users/hanyanjun/Documents/github/books/gitbook/content/help/styles/website.css{%endraw%} {% if file.type==\"asciidoc\" %}++++{% endif %} Splitter 使侧边栏的宽度可以自由调节 插件地址 \"plugins\": [ \"splitter\" ] Mermaid-gb3 支持渲染Mermaid图表插件地址 \"plugins\": [ \"mermaid-gb3\" ] 使用示例: graph TD; A-->B; A-->C; B-->D; C-->D; Puml 使用 PlantUML 展示 uml 图。 插件地址PlantUML 地址 { \"plugins\": [\"puml\"] } 使用示例： {% plantuml %} Class Stage Class Timeout { +constructor:function(cfg) +timeout:function(ctx) +overdue:function(ctx) +stage: Stage } Stage 效果如下所示： Graph 使用 function-plot 绘制数学函数图。 插件地址function-plot { \"plugins\": [ \"graph\" ], } 下面是一个示例，需要注意的是 {% graph %} 块中的内容必须是合法的 JSON 格式。 {% graph %} { \"title\": \"1/x * cos(1/x)\", \"grid\": true, \"xAxis\": { \"domain\": [0.01, 1] }, \"yAxis\": { \"domain\": [-100, 100] }, \"data\": [{ \"fn\": \"1/x * cos(1/x)\", \"closed\": true }] } {% endgraph %} 效果如下所示： functionPlot({\"title\":\"1/x * cos(1/x)\",\"grid\":true,\"xAxis\":{\"domain\":[0.01,1]},\"yAxis\":{\"domain\":[-100,100]},\"data\":[{\"fn\":\"1/x * cos(1/x)\",\"closed\":true}],\"target\":\"#plugin-graph-0\"}); Chart 使用 C3.js 或者 Highcharts 绘制图形。 插件地址C3.jshighcharts { \"plugins\": [ \"chart\" ], \"pluginsConfig\": { \"chart\": { \"type\": \"c3\" } } } type 可以是 c3 或者 highcharts, 默认是 c3. 下面是一个示例： {% chart %} { \"data\": { \"type\": \"bar\", \"columns\": [ [\"data1\", 30, 200, 100, 400, 150, 250], [\"data2\", 50, 20, 10, 40, 15, 25] ], \"axes\": { \"data2\": \"y2\" } }, \"axis\": { \"y2\": { \"show\": true } } } {% endchart %} 效果如下所示： c3.generate({\"bindto\":\"#plugin-chart-1\", \"data\": { \"type\": \"bar\", \"columns\": [ [\"data1\", 30, 200, 100, 400, 150, 250], [\"data2\", 50, 20, 10, 40, 15, 25] ], \"axes\": { \"data2\": \"y2\" } }, \"axis\": { \"y2\": { \"show\": true } } }); Sharing-plus 分享当前页面，比默认的 sharing 插件多了一些分享方式。 插件地址 plugins: [\"-sharing\", \"sharing-plus\"] 配置: \"pluginsConfig\": { \"sharing\": { \"douban\": false, \"facebook\": false, \"google\": true, \"hatenaBookmark\": false, \"instapaper\": false, \"line\": true, \"linkedin\": true, \"messenger\": false, \"pocket\": false, \"qq\": false, \"qzone\": true, \"stumbleupon\": false, \"twitter\": false, \"viber\": false, \"vk\": false, \"weibo\": true, \"whatsapp\": false, \"all\": [ \"facebook\", \"google\", \"twitter\", \"weibo\", \"instapaper\", \"linkedin\", \"pocket\", \"stumbleupon\" ] } } Tbfed-pagefooter 为页面添加页脚 插件地址 \"plugins\": [ \"tbfed-pagefooter\" ], \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\":\"Copyright &copy zhangjikai.com 2017\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" } } Expandable-chapters-small 使左侧的章节目录可以折叠 插件地址 plugins: [\"expandable-chapters-small\"] Toggle-chapters 使左侧的章节目录可以折叠。相比expandable-chapters， 没有折叠箭头符号，并且当前只有一项可以展开。参考：https://blog.csdn.net/lintcgirl/article/details/54314113 插件地址 plugins: [\"toggle-chapters\"] Sectionx 将页面分块显示，标签的 tag 最好是使用 b 标签，如果使用 h1-h6 可能会和其他插件冲突。插件地址 { \"plugins\": [ \"sectionx\" ], \"pluginsConfig\": { \"sectionx\": { \"tag\": \"b\" } } } 使用示例 Insert markdown content here (you should start with h3 if you use heading). GA Google 统计插件地址 \"plugins\": [ \"ga\" ], \"pluginsConfig\": { \"ga\": { \"token\": \"UA-XXXX-Y\" } } 3-ba 百度统计插件地址 { \"plugins\": [\"3-ba\"], \"pluginsConfig\": { \"3-ba\": { \"token\": \"xxxxxxxx\" } } } Donate 打赏插件插件地址 \"plugins\": [ \"donate\" ], \"pluginsConfig\": { \"donate\": { \"wechat\": \"https://zhangjikai.com/resource/weixin.png\", \"alipay\": \"https://zhangjikai.com/resource/alipay.png\", \"title\": \"\", \"button\": \"赏\", \"alipayText\": \"支付宝打赏\", \"wechatText\": \"微信打赏\" } } Local Video 使用Video.js 播放本地视频插件地址 \"plugins\": [ \"local-video\" ] 使用示例：为了使视频可以自适应，我们指定视频的width为100%，并设置宽高比为16:9，如下面所示 {% raw %} To view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video {% endraw %} 另外我们还要再配置下css，即在website.css中加入 .video-js { width:100%; height: 100%; } To view this video please enable JavaScript, and consider upgrading to a web browser that supports HTML5 video Simple-page-toc 自动生成本页的目录结构。另外 GitBook 在处理重复的标题时有些问题，所以尽量不适用重复的标题。 插件地址 { \"plugins\" : [ \"simple-page-toc\" ], \"pluginsConfig\": { \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true } } } 使用方法: 在需要生成目录的地方加上 Anchors 添加 Github 风格的锚点样式 插件地址 \"plugins\" : [ \"anchors\" ] Anchor-navigation-ex 添加Toc到侧边悬浮导航以及回到顶部按钮。需要注意以下两点： 本插件只会提取 h[1-3] 标签作为悬浮导航 只有按照以下顺序嵌套才会被提取# h1 ## h2 ### h3 必须要以 h1 开始，直接写 h2 不会被提取 ## h2 插件地址 { \"plugins\": [ \"anchor-navigation-ex\" ], \"pluginsConfig\": { \"anchor-navigation-ex\": { \"isRewritePageTitle\": true, \"isShowTocTitleIcon\": true, \"tocLevel1Icon\": \"fa fa-hand-o-right\", \"tocLevel2Icon\": \"fa fa-hand-o-right\", \"tocLevel3Icon\": \"fa fa-hand-o-right\" } } } Edit Link 如果将 GitBook 的源文件保存到github或者其他的仓库上，使用该插件可以链接到当前页的源文件上。插件地址 \"plugins\": [\"edit-link\"], \"pluginsConfig\": { \"edit-link\": { \"base\": \"https://github.com/USER/REPO/edit/BRANCH\", \"label\": \"Edit This Page\" } } Sitemap-general 生成sitemap插件地址 { \"plugins\": [\"sitemap-general\"], \"pluginsConfig\": { \"sitemap-general\": { \"prefix\": \"http://gitbook.zhangjikai.com\" } } } Favicon 更改网站的 favicon.ico插件地址 { \"plugins\": [ \"favicon\" ], \"pluginsConfig\": { \"favicon\": { \"shortcut\": \"assets/images/favicon.ico\", \"bookmark\": \"assets/images/favicon.ico\", \"appleTouch\": \"assets/images/apple-touch-icon.png\", \"appleTouchMore\": { \"120x120\": \"assets/images/apple-touch-icon-120x120.png\", \"180x180\": \"assets/images/apple-touch-icon-180x180.png\" } } } } Todo 添加 Todo 功能。默认的 checkbox 会向右偏移 2em，如果不希望偏移，可以在 website.css 里加上下面的代码: input[type='checkbox']{ margin-left: -2em; } 插件地址 \"plugins\": [\"todo\"] 使用示例： [ ] write some articles [x] drink a cup of tea Terminal 模拟终端显示，主要用于显示命令以及多行输出，不过写起来有些麻烦。 插件地址 { \"plugins\": [ \"terminal\" ], \"pluginsConfig\": { \"terminal\": { \"copyButtons\": true, \"fade\": false, \"style\": \"flat\" } } } 现在支持 6 种标签： command: Command \"executed\" in the terminal. delimiter: Sequence of characters between the prompt and the command. error: Error message. path: Directory path shown in the prompt. prompt: Prompt of the user. warning: Warning message. 标签的使用格式如下所示： **[ 内容] 为了使标签正常工作，需要在代码块的第一行加入 **[termial] 标记，下面是一个完整的示例： ``` **[terminal] **[prompt foo@joe]**[path ~]**[delimiter $ ]**[command ./myscript] Normal output line. Nothing special here... But... You can add some colors. What about a warning message? **[warning [WARNING] The color depends on the theme. Could look normal too] What about an error message? **[error [ERROR] This is not the error you are looking for] ``` 效果如下所示： **[terminal] **[prompt foo@joe]**[path ~]**[delimiter $ ]**[command ./myscript] Normal output line. Nothing special here... But... You can add some colors. What about a warning message? **[warning [WARNING] The color depends on the theme. Could look normal too] What about an error message? **[error [ERROR] This is not the error you are looking for] terminal 支持下面 5 种样式，如果需要更换样式，在 pluginsConfig 里配置即可。 black: Just that good old black terminal everybody loves. classic: Looking for green color font over a black background? This is for you. flat: Oh, flat colors. I love flat colors. Everything looks modern with them. ubuntu: Admit it or not, but Ubuntu have a good looking terminal. white: Make your terminal to blend in with your GitBook. Copy-code-button 为代码块添加复制的按钮。 插件地址 { \"plugins\": [\"copy-code-button\"] } 效果如下图所示： Alerts 添加不同 alerts 样式的 blockquotes，目前包含 info, warning, danger 和 success 四种样式。 插件地址 { \"plugins\": [\"alerts\"] } 下面是使用示例： Info styling > **[info] For info** > > Use this for infomation messages. Warning styling > **[warning] For warning** > > Use this for warning messages. Danger styling > **[danger] For danger** > > Use this for danger messages. Success styling > **[success] For info** > > Use this for success messages. 效果如下所示： Info styling [info] For info Use this for infomation messages. Warning styling [warning] For warning Use this for warning messages. Danger styling [danger] For danger Use this for danger messages. Success styling [success] For info Use this for success messages. Include-csv 展示 csv 文件。 插件地址 { \"plugins\": [\"include-csv\"] } 使用示例： {% includeCsv src=\"../../assets/csv/test.csv\", useHeader=\"true\" %} {% endincludeCsv %} 效果如下所示： ../../assets/csv/test.csv产业数值比重第一产业11110.00%第二产业22220.00%第三产业33330.00%第四产业44440.00% Musicxml 支持 musicxml 格式的乐谱渲染。 插件地址musicXML { \"plugins\": [\"musicxml\"] } 下面是一个示例，需要注意的是 block 中的内容必须是一个合法的 musicxml 文件路径，并且不能有换行和空格。 {% musicxml %}assets/musicxml/mandoline - debussy.xml{% endmusicxml %} 效果如下所示 Klipse 集成 Klipse (online code evaluator) 插件地址Klipse { \"plugins\": [\"klipse\"] } klipse 目前支持下面的语言： javascript: evaluation is done with the javascript function eval and pretty printing of the result is done with pretty-format clojure[script]: evaluation is done with Self-Hosted Clojurescript ruby: evaluation is done with Opal C++: evaluation is done with JSCPP python: evaluation is done with Skulpt scheme: evaluation is done with BiwasScheme PHP: evaluation is done with Uniter BrainFuck JSX EcmaScript2017 Google Charts: See Interactive Business Report with Google Charts. 下面是一个使用示例： ```eval-python print [x + 1 for x in range(10)] ``` 效果如下所示： print [x + 1 for x in range(10)] Versions-select 添加版本选择的下拉菜单，针对文档有多个版本的情况。 插件地址 { \"plugins\": [ \"versions-select\" ], \"pluginsConfig\": { \"versions\": { \"options\": [ { \"value\": \"http://gitbook.zhangjikai.com\", \"text\": \"v3.2.2\" }, { \"value\": \"http://gitbook.zhangjikai.com/v2/\", \"text\": \"v2.6.4\" } ] } } } 我们可以自定义 css 来修改 select 的显示样式： .versions-select select { height: 2em; line-height: 2em; background: #efefef; border-radius: 4px; } 效果见左上角。 RSS 添加 rss 订阅功能。 插件地址 { \"plugins\": [ \"rss\" ], \"pluginsConfig\": { \"rss\": { \"title\": \"GitBook 使用教程\", \"description\": \"记录 GitBook 的配置和一些插件的使用\", \"author\": \"Jikai Zhang\", \"feed_url\": \"http://gitbook.zhangjikai.com/rss\", \"site_url\": \"http://gitbook.zhangjikai.com/\", \"managingEditor\": \"me@zhangjikai.com\", \"webMaster\": \"me@zhangjikai.com\", \"categories\": [ \"gitbook\" ] } } } 效果见右上角。 theme-comscore 主题插件, 修改标题和表格颜色。默认标题都是黑色的。 插件地址 { \"plugins\": [ \"theme-comscore\" ] } summary 根据文件自动生成目录。 插件地址 { \"plugins\": [ \"summary\" ] } 规则： 每个新增的目录中加入README.md，否则菜单为不可折叠 同个目录下的文件采用自然排序来决定菜单生成的前后顺序， 故在文件或目录前加入 \"数字-\" 如 \"0-\" 或 \"1-\" 来排序菜单的前后顺序。 菜单由目录自动生成，菜单名称依赖md文件中的标题， 故每个md文件中必须添加标题, 否则无法生成目录。 示例： 我们假设您的源代码树是这样完成的： $ tree . . ├── 1-Getting Started │ ├── 0-README.md │ └── 1-TEST.md ├── 2-Reference │ └── 0-README.md ├── README.md └── SUMMARY.md 生成的SUMMARY.md文件将如下所示： - [Getting Started](1-Getting Started/0-README.md) - [Test](1-Getting Started/1-TEST.md) - [Reference](2-Reference/0-README.md) Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2021-03-19 12:58:38 "},"content/work/readme.html":{"url":"content/work/readme.html","title":"面试知识总结","keywords":"","body":"原生 html css svg javascript es6 ts 协议 http | https ws | wss 数据结构 算法 排序 场景 构建工具 webpack gulp rollup ci docker 测试 版本工具 git svn 框架 vue react node axios koa2 router 优化 网络 构建 原生 框架 架构 0->1 打包工具 自动化部署 规范 常见面试题 技术性问题 场景性问题 项目结合问题 Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2021-03-16 14:34:36 "},"content/work/html.html":{"url":"content/work/html.html","title":"html部分","keywords":"","body":"img 标签 title 和 alt 有什么区别 1.title是global attributes之一，用于为元素提供附加的 advisory information。通常当鼠标滑动到元素上的时候显示。 2.alt是 img 的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。 html标签嵌套规则 内联标签不能包含块标签 p标签不能包含块标签 有几个特殊的块级元素只能包含内嵌元素，不能再包含块级元素，这几个特殊的标签是： h1、h2、h3、h4、h5、h6、p、dt strong em 和 b i 标签有什么区别 b 、 i 是视觉元素；表示 无意义的 加粗和斜体； strong 、em 是表达元素；表示 有意义的 加粗和斜体； em 表示一般强调的文本， strong表示 重要强调的问题； 即 b i为 无意义标签； strong em 为有意义标签； input 类型 text 、 password 、 submit 、 radio 、 checkbox 、button 、 number 、 date 、 color 、 range 、 month 、 week 、time 、 datetime 、datetime-local 、email 、search 、 te 、 url Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2021-03-12 11:22:33 "},"content/work/css.html":{"url":"content/work/css.html","title":"css部分","keywords":"","body":"伪类和伪元素 伪元素 用于创建不在文档中的元素，并未其添加样式；如： ::before 等； 一般为双冒号用来区分伪类和伪元素，但是浏览器对于单冒号的伪元素也是支持的； 伪类 本质为css选择器；主要为：用户行为等自动添加的样式提供可供css选择的样式控制；如：:hover 如何实现 宽高比为4 :3 的div 利用padding ， 当 margin padding left/top 取值百分比，以父级div 的宽度计算； 什么是margin重叠 相邻元素margin 重叠 ， 父子元素margin 重叠； 如果都是正边界，结果的边界宽度是相邻边界宽度中最大的值 如果出现负边界，则在最大的正边界中减去绝对值最大的负边界 如果没有正边界，则从零中减去绝对值最大的负边界 flex flex : inital => 0 1 auto ; auto => 1 1 auto ; none => 0 0 auto; flex : 1 => 1 1 auto; 圣杯布局 双飞翼布局 flex grid floa absolute @import link 区别 加载时机： link 解析到加载， @import 页面加载后加载； 引入类型： link 可加载其他，@import 只适用于css； 权重： link权重大于@import，@import引入的css 会置于顶部，如果样式有重复则@import中样式不会生效； 可通过dom控制： link可以通过js中dom接口动态插入，@import则不可以； positon : absolute 定位原点 不设置left top ， 以祖先元素中position中static中的第一个元素的content位置为起始位置，如果设置left 0 top 0 以padding 为起始位置； 绝对定位元素与非绝对定位元素的百分比计算的区别 绝对定位元素的宽高百分比是相对于临近的position不为static的祖先元素的paddingbox来计算的。 非绝对定位元素的宽高百分比则是相对于父元素的contentbox来计算的。 元素竖向的百分比设定是相对于容器的高度吗？ 如果是height的话，是相对于包含块的高度。 如果是padding或者margin竖直方向的属性则是相对于包含块的宽度。 渲染过程 dom tree css tree layout paint compositing 参考文章 掘金 腾讯云 Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2021-03-17 17:10:48 "},"content/work/javascript.html":{"url":"content/work/javascript.html","title":"原生js","keywords":"","body":"模块化 amd cmd amd require.js 依赖前置 cmd sea.js 依赖就近 js中 defer async 都是异步执行js 的方式； defer : 立即下载 异步执行；（页面加载后执行）（DomContentLoaded） async : 异步下载 异步执行；（页面加载后执行）（DomContentLoaded） JSON.stringify undefined、任意的函数以及 symbol 作为对象属性值时 JSON.stringify() 对跳过（忽略）它们进行序列化 undefined、任意的函数以及 symbol 作为数组元素值时，JSON.stringify() 将会将它们序列化为 null undefined、任意的函数以及 symbol 被 JSON.stringify() 作为单独的值进行序列化时，都会返回 undefined NaN 和 Infinity 格式的数值及 null 都会被当做 null js == null undefined 相等 一方为boolean ， boolean 转化为数字； 一方为数字 ， 另一方转化为数字； 都为字符串，字符串比较； 一方为对象，另一个不是，调用对象valeOf 方法获取基本类型值后进行对比； 两方都为对象，比较对应内存地址是否相同； 参考文章 参考链接 Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2021-03-17 17:10:35 "},"content/work/http.html":{"url":"content/work/http.html","title":"http","keywords":"","body":"http介绍 http概念 HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」。 状态码 3xx 3xx 类状态码表示客户端请求的资源发送了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是重定向。 「301 Moved Permanently」表示永久重定向，说明请求的资源已经不存在了，需改用新的 URL 再次访问。「302 Found」表示临时重定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问。 301 和 302 都会在响应头里使用字段 Location，指明后续要跳转的 URL，浏览器会自动重定向新的 URL。 「304 Not Modified」不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，用于缓存控制。 http/1.1、http/2、http/3 演变 http/1.0 每次请求需要重新建立连接 http/1.1 长连接，但是会服务端队头阻塞 http/2.0 解决了队头阻塞，但是会发生丢包重传 http/3.0 基于tcp的udp改良的QUIC连接； http 缓存 缓存分类： 强制缓存 协商缓存 如果使用了强制缓存，并且未达到过期时间，那么客户端不再和服务端发生交互，此间如果资源发生修改也不会重新获取，有效期内 返回状态码为 200 ， 如果达到过期时间再去服务端拿 服务端返回未过期 返回 304 从缓存中直接拿取；如果使用了协商缓存，每次请求资源都会走服务器进行对比，如果资源未过期 返回状态码 304 ，如果资源已经过期返回最新资源且返回新的资源标识和时间； 优先级： 强缓存优先级大于协商缓存 http各时期缓存对比： http/1.0 通过过期时间：Expires， 服务器时间和客户端时间不一致会出问题； http/1.1 通过cache-control、eTag、last-modified 对比 last-modified 只能到秒级，而且只要文件只要有保存那么时间就会被修改，一个是时间维度不够，一个修改缺乏准确性，所以出现了eTag； 对比： 前端如何设置缓存？ 一般需要缓存的资源有html页面和其他静态资源： 1、html页面缓存的设置主要是在标签中嵌入标签，这种方式只对页面有效，对页面上的资源无效 1.1、html页面禁用缓存的设置如下： // 仅有IE浏览器才识别的标签，不一定会在请求字段加上Pragma，但的确会让当前页面每次都发新请求 // 其他主流浏览器识别的标签 // 仅有IE浏览器才识别的标签，该方式仅仅作为知会IE缓存时间的标记，你并不能在请求或响应报文中找到Expires字段 1.2、html设置缓存如下： // 其他主流浏览器识别的标签 // 仅有IE浏览器才识别的标签 2、静态资源的缓存一般是在web服务器上配置的，常用的web服务器有：nginx、apache。具体的配置这里不做详细介绍，大家自行查阅。 本地缓存 网络安全 常见问题 GET 和 POST 方法都是安全和幂等的吗？ 在 HTTP 协议里，所谓的「安全」是指请求方法不会「破坏」服务器上的资源。 所谓的「幂等」，意思是多次执行相同的操作，结果都是「相同」的。 GET 方法就是安全且幂等的，因为它是「只读」操作，无论操作多少次，服务器上的数据都是安全的，且每次的结果都是相同的。 POST 因为是「新增或提交数据」的操作，会修改服务器上的资源，所以是不安全的，且多次提交数据就会创建多个资源，所以不是幂等的。 参考文章 硬核！30 张图解 HTTP 常见的面试题 深入理解HTTP缓存机制及原理 一文读懂http缓存（超详细） Content Security Policy 入门教程 Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2021-03-19 12:23:25 "}}